#!/bin/sh
# A generic setup script for Dragon01
# ~David F Muller
# Version 3.2.6

    # Test for bash shell
    if [ "$0" != "/bin/bash" ]; then /bin/bash; fi
    ##Determine Base Distro
    declare -A osInfo;
    osInfo[/etc/redhat-release]=dnf
    osInfo[/etc/arch-release]=pacman
    osInfo[/etc/gentoo-release]=emerge
    osInfo[SUSe-release]=zypper
    osInfo[/etc/debian_version]=apt

    for i in "${!osInfo[@]}"; do
        if [ -f "$i" ]; then
            #Set the Base Install Command
            BaInCo="${osInfo[$i]}"
        fi
    done

    if [ "$BaInCo" = "pacman" ]; then
            #Making sure yay-bin is installed
            mkdir ./Installer
            cd Installer || return
            wget https://aur.archlinux.org/cgit/aur.git/snapshot/yay-bin.tar.gz
            tar -xvf ./yay-bin.tar.gz
            cd yay-bin || return
            makepkg -i --noconfirm --needed
            cd .. || return
            sudo rm -fR ./yay-bin
            cd .. || return
            sudo rm -fR ./Installer
    fi

    #Set Install Command
    case $BaInCo in
        dnf)
            InCommand="sudo dnf install"
            UpGradeCommand="sudo dnf -y system-upgrade"
            $InCommand -y dialog
            ;;
        pacman)
            InCommand="yay -S --needed"
            UpGradeCommand="yay -Syyu --noconfirm"
            $InCommand --noconfirm dialog
            ;;
        emerge)
            InCommand="sudo emerge --ask"
            UpGradeCommand="sudo emerge --update --deep --with-bdeps=y @world"
            ;;
        zypper)
            InCommand="sudo zypper in"
            UpGradeCommand="sudo zypper -n dist-upgrade"
            $InCommand -n dialog
            ;;
        apt)
            InCommand="sudo apt install"
            UpGradeCommand="sudo apt update && sudo apt dist-upgrade"
            $InCommand -y dialog
            ;;
    esac

    #Function that will be used to simlink Home folders
    symlink_setup () {
        if [ -e "$HOMEPART/$1" ]; then
            if [ "$1" = "Steam" ]; then
                if [ -e "/home/david/.local/share/$1" ]; then
                    sudo rm -Rf "/home/david/.local/share/$1"; fi
                ln -s "$HOMEPART/$1" "/home/david/.local/share";
            else
                if [ -e "/home/david/$1" ]; then
                    sudo rm -Rf "/home/david/$1"; fi
                ln -s "$HOMEPART/$1" "/home/david";
            fi
        else echo "$1 not found in $HOMEPART"
        fi
    }

    #Array to list home folders requiring simlinking
    home_folders=('Camera' 'Documents' 'Downloads' 'Etcher' 'Games' 'Github' 'Google_Drive' 'Links' 'Music' 'Pictures'
        'Scripts' 'SteamLibrary' 'Steam' 'Sync' 'Videos' 'VPNac' 'Wallpapers' 'Working' '.gnupg' '.gdfuse' '.mozilla' '.ssh'
        '.steam' '.thunderbird' '.zoom' '.pam-gnupg' '.zprezto')

    #Updating Sudoers File to Add NOPASSWD to User
    echo "Sudo password is required for certain commands in this script."
    echo "Entering an incorrect password will cause the script to crash."
    read -r -s -p "Enter password: " SUDOPWD && printf "\n"
    echo "$SUDOPWD" | sudo -S sh -c "echo \"$USER ALL=(ALL) NOPASSWD: ALL\" >&- > /etc/sudoers.d/90-$USER"

	#Download needed files
    echo "Downloading needed files"
    cd /tmp || return
    wget https://github.com/Dreamingwolf/Setup-Scripts/raw/master/Dragon01_hosts

	#Update hosts file
    echo "Updating the hosts file"
    sudo hostnamectl set-hostname Dragon01
    sudo cp -f ./Dragon01_hosts /etc/hosts

	#Create mount points
    echo "Creating needed mount points"
    mkdir /home/david/.home
    sudo mkdir /Backup
    sudo mkdir /StorageBunker

	#Core Operations
    HOMEPART=/home/david/.home
    HOMEDATA=$( sudo blkid -t PARTLABEL="Home" -o device )
    HOMEFSTAB=$( sudo blkid -s TYPE -o value "$HOMEDATA" )
    HOMEUUID=$( sudo blkid -s UUID -o value "$HOMEDATA" )

    BACKUPDATA=$( sudo blkid -t PARTLABEL="Backup" -o device )
    BACKUPFSTAB=$( sudo blkid -s TYPE -o value "$BACKUPDATA" )
    BACKUPUUID=$( sudo blkid -s UUID -o value "$BACKUPDATA" )

    STORAGEDATA=$( sudo blkid -t PARTLABEL="StorageB" -o device )
    STORAGEFSTAB=$( sudo blkid -s TYPE -o value "$STORAGEDATA" )
    STORAGEUUID=$( sudo blkid -s UUID -o value "$STORAGEDATA" )

    #Updating /etc/fstab
    echo "Adding disks to /etc/fstab"
    echo "UUID=$HOMEUUID $HOMEPART $HOMEFSTAB users,exec,rw,auto,noatime 0 2
    UUID=$BACKUPUUID /Backup $BACKUPFSTAB users,exec,rw,auto,noatime 0 2
    UUID=$STORAGEUUID /StorageBunker $STORAGEFSTAB users,exec,rw,auto,noatime 0 2" | sudo tee -a /etc/fstab

    #Setup home folder
    echo "Mounting, setting up, and linking home folder"
    sudo mount "$HOMEDATA" "$HOMEPART"

    #Remove original folders and set symbolic links
    for i in "${home_folders[@]}"; do
        symlink_setup "$i"
    done

   #Verify that all userfiles are mine
    sudo chown -hR david:david /home/david/*
#    sudo chmod -R 777 /home/david/*

    #Add ssh key
    eval "$(ssh-agent -s)"
    sudo chmod 400 /home/david/.ssh/id_rsa
    ssh-add /home/david/.ssh/id_rsa

    #Install Apps
    $InCommand pass ruby qrencode tk firefox thunderbird p7zip smplayer smplayer-themes smtube youtube-dl mplayer \
    python-pyqt5 drkonqi flite kwalletmanager kio-extras kdoctools catdoc kdeconnect sox dvdauthor dvgrab recordmydesktop \
    simplescreenrecorder xine-ui dvd+rw-tools vcdimager cdrdao transcode suckless-tools luajit python-opengl clang botan kde-cli-tools \
    gnome-boxes virtualbox-6.0 sublime-text sublime-merge neofetch steam gimp obs-studio lutris hexchat shotwell audacity guvcview catfish \
    grub-customizer rawtherapee kipi-plugins kamera kdegraphics-mobipocket calligra pstoedit \
    fusesmb samba cifs-utils exfat-utils engrampa arj lzip unrar unace darktable gwenview inkscape okular skanlite hplip xsane \
    openshot simplescreenrecorder shellcheck unixodbc redshift numlockx variety \
    gv ebtables bridge-utils radvd ceph terminator zsh

    $UpGradeCommand

	#Cleanup
    echo "Cleaning up"
    sudo rm ./Dragon01_hosts

    echo "DON'T FORGET TO REBOOT!"
