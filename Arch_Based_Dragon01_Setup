#!/bin/bash
# A setup script for arch based distros
# ~David F Muller
# Version 3.3

    #Function that will be used to simlink Home folders
    symlink_home_folders () {
        if [ -e "$HOMEPART/$1" ]; then
            if [ -e "/home/david/$1" ]; then
                sudo rm -Rf "/home/david/$1"; fi
            ln -s "$HOMEPART/$1" "/home/david";
            else echo "$1 not found in $HOMEPART"
        fi
    }

    symlink_local_share_folders () {
        if [ -e "$HOMEPART/.local/share/$1" ]; then
            if [ -e "/home/david/.local/share/$1" ]; then
                    sudo rm -Rf "/home/david/.local/share/$1"; fi
            ln -s "$HOMEPART/$1" "/home/david/.local/share";
            else echo "$1 not found in $HOMEPART/.local/share"
        fi
    }

    symlink_config_folders () {
        if [ -e "$HOMEPART/.config/$1" ]; then
            if [ -e "/home/david/.config/$1" ]; then
                    sudo rm -Rf "/home/david/.config/$1"; fi
            ln -s "$HOMEPART/$1" "/home/david/.config";
            else echo "$1 not found in $HOMEPART/.config"
        fi
    }

    #Array to list home folders requiring simlinking
        home_folders=('Camera' 'Documents' 'Downloads' 'Etcher' 'Games' 'Github' 'Google_Drive' 'Links' 'Music' 'Pictures'
            'Scripts' 'SteamLibrary' 'Steam' 'Sync' 'Videos' 'VPNac' 'Wallpapers' 'Working' '.gnupg' '.gdfuse' '.mozilla' '.ssh'
            '.steam' '.thunderbird' '.zoom' '.pam-gnupg')

        local_share_folders=('Euro Truck Simulator 2' 'lutris' 'qtwebflix' 'Rocket League' 'Steam' 'TelegramDesktop')

        config_folders=('Bitwarden' 'discord' 'gnome-boxes' 'kdeconnect' 'libreoffice' 'lutris' 'Mumble' 'nitrogen'
            'obs-studio' 'Qtwebflix' 'redshift' 'smplayer' 'terminator' 'Thunar' 'variety' 'VirtualBox' 'yay' 'zoomus.conf')

    #Updating Sudoers File to Add NOPASSWD to User
        echo "Sudo password is required for certain commands in this script."
        echo "Entering an incorrect password will cause the script to crash."
        read -r -s -p "Enter password: " SUDOPWD && printf "\n"
        echo "$SUDOPWD" | sudo -S sh -c "echo \"$USER ALL=(ALL) NOPASSWD: ALL\" >&- > /etc/sudoers.d/90-$USER"

    #Making sure yay-bin is installed
        sudo pacman -R --noconfirm yay
        mkdir ./Installer
        cd Installer || return
        wget https://aur.archlinux.org/cgit/aur.git/snapshot/yay-bin.tar.gz
        tar -xvf ./yay-bin.tar.gz
        cd yay-bin || return
        makepkg -i --noconfirm --needed
        cd .. || return
        sudo rm -fR ./yay-bin
        cd .. || return
        sudo rm -fR ./Installer

	#Download needed files
        echo "Downloading needed files"
        cd /tmp || return
        wget https://github.com/Dreamingwolf/Setup-Scripts/raw/master/arch_repos
        wget https://github.com/Dreamingwolf/Setup-Scripts/raw/master/Dragon01_hosts

	#Update hosts file
        echo "Updating the hosts file"
        sudo hostnamectl set-hostname Dragon01
        sudo cp -f ./Dragon01_hosts /etc/hosts

	#Create mount points
        echo "Creating needed mount points"
        mkdir /home/david/.home
        sudo mkdir /Backup
        sudo mkdir /StorageBunker

    #Core Operations
        HOMEPART=/home/david/.home
        HOMEDATA=$( sudo blkid -t PARTLABEL="Home" -o device )
        HOMEFSTAB=$( sudo blkid -s TYPE -o value "$HOMEDATA" )
        HOMEUUID=$( sudo blkid -s UUID -o value "$HOMEDATA" )

        BACKUPDATA=$( sudo blkid -t PARTLABEL="Backup" -o device )
        BACKUPFSTAB=$( sudo blkid -s TYPE -o value "$BACKUPDATA" )
        BACKUPUUID=$( sudo blkid -s UUID -o value "$BACKUPDATA" )

        STORAGEDATA=$( sudo blkid -t PARTLABEL="StorageB" -o device )
        STORAGEFSTAB=$( sudo blkid -s TYPE -o value "$STORAGEDATA" )
        STORAGEUUID=$( sudo blkid -s UUID -o value "$STORAGEDATA" )

    #Updating /etc/fstab
        echo "Adding disks to /etc/fstab"
        echo "UUID=$HOMEUUID $HOMEPART $HOMEFSTAB users,exec,rw,auto,noatime 0 2
        UUID=$BACKUPUUID /Backup $BACKUPFSTAB users,exec,rw,auto,noatime 0 2
        UUID=$STORAGEUUID /StorageBunker $STORAGEFSTAB users,exec,rw,auto,noatime 0 2" | sudo tee -a /etc/fstab

	#Setup home folder
        echo "Mounting, setting up, and linking home folder"

	#Mount the UserData Partition to .home
        sudo mount "$HOMEDATA" "$HOMEPART"

	#Remove original folders & Install symbolic links
        for i in "${home_folders[@]}"; do
            symlink_home_folders "$i"
        done

        for i in "${local_share_folders[@]}"; do
            symlink_local_share_folders "$i"
        done

        for i in "${config_folders[@]}"; do
            symlink_config_folders "$i"
        done

   #Verify that all userfiles are mine
        sudo chown -hR david:david /home/david/*
#        sudo chmod -R 777 /home/david/*

	#Update and Upgrade
        echo "Updating and Upgrading"
        cd /tmp || return
        while read -r; do
            sudo tee -a /etc/pacman.conf
        done < "./arch_repos"
        sudo pacman-key --init
        sudo pacman-key --populate archlinux
        sudo pacman-key --recv-keys 932BA3FA0C86812A32D1F54DAB5964AEB9FEDDDC
        sudo pacman-key --lsign-key 932BA3FA0C86812A32D1F54DAB5964AEB9FEDDDC
        sudo pacman-key --recv-keys 313F5ABD
        sudo pacman-key --lsign-key 313F5ABD
        sudo pacman-key --recv-keys 4B4E7A9523ACD201
        sudo pacman-key --lsign-key 4B4E7A9523ACD201
        sudo pacman-key --recv-keys 7448C890582975CD
        sudo pacman-key --lsign-key 7448C890582975CD
        curl -O https://download.sublimetext.com/sublimehq-pub.gpg && sudo pacman-key --add sublimehq-pub.gpg && sudo pacman-key --lsign-key 8A8F901A && rm sublimehq-pub.gpg
        echo -e "\n[sublime-text]\nServer = https://download.sublimetext.com/arch/stable/x86_64" | sudo tee -a /etc/pacman.conf
        sudo pacman -Sy --needed reflector
        sudo reflector -f 30 -l 30 --number 10 --verbose --save /etc/pacman.d/mirrorlist
        sudo pacman -Syy
        yay --editmenu --nodiffmenu --save

     # Overgrive prep
        yay -S --needed libnotify python python2-pyinotify python2-pip python2-gobject libappindicator-gtk3
        sudo pip2.7 install --upgrade google-api-python-client
        sudo pip2.7 install --upgrade oauth2client

    # Main program install commands
        sudo pacman -Rn --cascade firefox chromium dropbox spotify vivaldi-codecs-ffmpeg-extra-bin vivaldi geany atom evolution
        if [ -d "/home/david/.home/WinFonts" ]; then
                sudo mkdir /usr/share/fonts/WindowsFonts
                sudo cp -fR /home/david/.home/WinFonts /usr/share/fonts/WindowsFonts
                sudo chmod 755 /usr/share/fonts/WindowsFonts/*
                sudo fc-cache -f
        fi
        yay -S --needed linux-headers nvidia-dkms nvidia-settings nvidia-utils lib32-nvidia-utils pass ruby xorg-server-devel qrencode tk firefox-nightly thunderbird-nightly rawtherapee \
            p7zip p7zip-gui wimlib overgrive qtwebflix-git zoom discord telegram-desktop-systemqt-notoemoji smplayer smplayer-themes smplayer-skins smtube youtube-dl mplayer \
            python-pyqt5 drkonqi breeze-icons gst-libav flite kwalletmanager kio-extras kdoctools knetattach kirigami2 qt5-tools catdoc kdeconnect sdl_image sox movit \
            dvdauthor dvgrab recordmydesktop simplescreenrecorder xine-ui xsane-gimp dvd+rw-tools vcdimager emovix cdrdao transcode openmp dmenu pam-gnupg-git luajit \
            python-opengl qt5-xmlpatterns qt5-serialport qt5-websockets qt5-connectivity qt5-networkauth kimageformats khtml libappimage clang botan kde-cli-tools opusfile \
            gnome-boxes libvirt virtualbox virtualbox-guest-dkms virtualbox-guest-iso virtualbox-guest-utils virtualbox-host-dkms sublime-text sublime-merge neofetch \
            steam steam-fonts gimp obs-studio \
            lib32-mesa-vdpau lib32-libpulse lib32-jack lib32-libsamplerate lib32-speex lib32-giflib lib32-libldap lib32-gnutls lib32-mpg123 lib32-openal lib32-v4l-utils \
            lib32-libxcomposite lib32-libxinerama opencl-icd-loader lib32-opencl-icd-loader lib32-libxslt lib32-gst-plugins-base-libs python2-pygments python2-rdflib \
            lib32-sdl lib32-fluidsynth lib32-opencl-driver lutris hexchat shotwell audacity reaper-bin guvcview jdk-openjdk java-rhino catfish grub-customizer \
            fusesmb samba cifs-utils exfat-utils ntfs-3g-fuse engrampa arj lzip unrar unace darktable gwenview inkscape okular skanlite hplip xsane xsane-gimp \
            kipi-plugins kamera kdegraphics-mobipocket chmlib calligra libmediawiki libkvkontakte libwpg libwps libvisio libetonyek pstoedit openjpeg libgit2 curl \
            openshot simplescreenrecorder libreoffice-fresh libmythes beanshell shellcheck unixodbc postgresql-libs coin-or-mp wqy-zenhei redshift numlockx variety \
            gv ebtables bridge-utils radvd ceph qemu-block-gluster qemu-block-iscsi qemu-block-rbd qemu-arch-extra python2-pyquery python2-restkit terminator zsh
        sudo glib-compile-schemas /usr/share/glib-2.0/schemas
        getent group vboxusers || sudo groupadd vboxusers && sudo usermod -aG vboxusers david
        getent group vboxsf || sudo groupadd vboxsf && sudo usermod -aG vboxfs david
        yay -Syu

    #Add ssh key
        eval "$(ssh-agent -s)"
        sudo chmod 400 /home/david/.ssh/id_rsa
        ssh-add /home/david/.ssh/id_rsa

	#Cleanup
        echo "Cleaning up"
        sudo rm ./Dragon01_hosts
        sudo rm ./arch_repos

        echo "DON'T FORGET TO REBOOT!"
